<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="custom_8c" kind="file" language="C++">
    <compoundname>custom.c</compoundname>
    <includes refid="read_8h" local="yes">read.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">sys/mman.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">xf86drm.h</includes>
    <includes local="no">xf86drmMode.h</includes>
    <incdepgraph>
      <node id="1">
        <label>custom.c</label>
        <link refid="custom_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>read.h</label>
        <link refid="read_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>errno.h</label>
      </node>
      <node id="9">
        <label>fcntl.h</label>
      </node>
      <node id="10">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="12">
        <label>sys/mman.h</label>
      </node>
      <node id="6">
        <label>sys/types.h</label>
      </node>
      <node id="11">
        <label>time.h</label>
      </node>
      <node id="13">
        <label>unistd.h</label>
      </node>
      <node id="14">
        <label>xf86drm.h</label>
      </node>
      <node id="15">
        <label>xf86drmMode.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmodeset__dev" prot="public">modeset_dev</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="custom_8c_1a369266c24eacffb87046522897a570d5" prot="public" static="no">
        <name>_GNU_SOURCE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="29" column="9" bodyfile="custom.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="custom_8c_1a906c69494fba4d4a9531c49a5b6f17b3" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref> *</type>
        <definition>struct modeset_dev* modeset_list</definition>
        <argsstring></argsstring>
        <name>modeset_list</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="164" column="26" bodyfile="custom.c" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="custom_8c_1a59c3c0424bd670eaf105eab4bd8a6cc6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int modeset_find_crtc</definition>
        <argsstring>(int fd, drmModeRes *res, drmModeConnector *conn, struct modeset_dev *dev)</argsstring>
        <name>modeset_find_crtc</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>drmModeRes *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>drmModeConnector *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="336" column="12" bodyfile="custom.c" bodystart="336" bodyend="408" declfile="custom.c" declline="46" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="custom_8c_1accec59b68fd75d43d3aa3d1d80cdcf6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int modeset_create_fb</definition>
        <argsstring>(int fd, struct modeset_dev *dev)</argsstring>
        <name>modeset_create_fb</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>struct <ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="435" column="12" bodyfile="custom.c" bodystart="435" bodyend="493" declfile="custom.c" declline="48" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="custom_8c_1a998c621b0e784d074b081dc45e7ad28c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int modeset_setup_dev</definition>
        <argsstring>(int fd, drmModeRes *res, drmModeConnector *conn, struct modeset_dev *dev)</argsstring>
        <name>modeset_setup_dev</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>drmModeRes *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>drmModeConnector *</type>
          <declname>conn</declname>
        </param>
        <param>
          <type>struct <ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="272" column="12" bodyfile="custom.c" bodystart="272" bodyend="312" declfile="custom.c" declline="49" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="custom_8c_1ad494b17fa480f84dcea8887e29e4404a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int modeset_open</definition>
        <argsstring>(int *out, const char *node)</argsstring>
        <name>modeset_open</name>
        <param>
          <type>int *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="81" column="12" bodyfile="custom.c" bodystart="81" bodyend="100" declfile="custom.c" declline="51" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="custom_8c_1a25c89fc27750d9fd6fda727f56a919f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int modeset_prepare</definition>
        <argsstring>(int fd)</argsstring>
        <name>modeset_prepare</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="185" column="12" bodyfile="custom.c" bodystart="185" bodyend="241" declfile="custom.c" declline="52" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="custom_8c_1aff3e1705f94f2daaa8ca93e1fb8cbd3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modeset_draw</definition>
        <argsstring>(int dlen, uint8_t *data)</argsstring>
        <name>modeset_draw</name>
        <param>
          <type>int</type>
          <declname>dlen</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="643" column="13" bodyfile="custom.c" bodystart="643" bodyend="709" declfile="custom.c" declline="53" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="custom_8c_1a01a43259503d7f4c73ed7f4fef5b26ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modeset_cleanup</definition>
        <argsstring>(int fd)</argsstring>
        <name>modeset_cleanup</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="718" column="13" bodyfile="custom.c" bodystart="718" bodyend="747" declfile="custom.c" declline="54" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="custom_8c_1a46eb715bcd62c391aa6d47e2d5c29d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * str_reverse_in_place</definition>
        <argsstring>(char *str, int len)</argsstring>
        <name>str_reverse_in_place</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="495" column="6" bodyfile="custom.c" bodystart="495" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="custom_8c_1ab08d7243c96a9f4b3480f1c6ceaff720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fpga_write</definition>
        <argsstring>(uint8_t *argv, uint32_t dlen)</argsstring>
        <name>fpga_write</name>
        <param>
          <type>uint8_t *</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dlen</declname>
        </param>
        <briefdescription>
<para>Write data to FPGA. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Firstname Lastname</para>
</simplesect>
FPGA write function <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>argument list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="544" column="5" bodyfile="custom.c" bodystart="544" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="custom_8c_1a53c12871eb7119edede16615813de8a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t next_color</definition>
        <argsstring>(bool *up, uint8_t cur, unsigned int mod)</argsstring>
        <name>next_color</name>
        <param>
          <type>bool *</type>
          <declname>up</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cur</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>mod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="custom.c" line="611" column="16" bodyfile="custom.c" bodystart="611" bodyend="621"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>modeset<sp/>-<sp/>DRM<sp/>Modesetting<sp/>Example</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Written<sp/>2012<sp/>by<sp/>David<sp/>Rheinsberg<sp/>&lt;david.rheinsberg@gmail.com&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Dedicated<sp/>to<sp/>the<sp/>Public<sp/>Domain.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>DRM<sp/>Modesetting<sp/>Howto</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>This<sp/>document<sp/>describes<sp/>the<sp/>DRM<sp/>modesetting<sp/>API.<sp/>Before<sp/>we<sp/>can<sp/>use<sp/>the<sp/>DRM</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>API,<sp/>we<sp/>have<sp/>to<sp/>include<sp/>xf86drm.h<sp/>and<sp/>xf86drmMode.h.<sp/>Both<sp/>are<sp/>provided<sp/>by</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>libdrm<sp/>which<sp/>every<sp/>major<sp/>distribution<sp/>ships<sp/>by<sp/>default.<sp/>It<sp/>has<sp/>no<sp/>other</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>dependencies<sp/>and<sp/>is<sp/>pretty<sp/>small.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>Please<sp/>ignore<sp/>all<sp/>forward-declarations<sp/>of<sp/>functions<sp/>which<sp/>are<sp/>used<sp/>later.<sp/>I</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>reordered<sp/>the<sp/>functions<sp/>so<sp/>you<sp/>can<sp/>read<sp/>this<sp/>document<sp/>from<sp/>top<sp/>to<sp/>bottom.<sp/>If</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>you<sp/>reimplement<sp/>it,<sp/>you<sp/>would<sp/>probably<sp/>reorder<sp/>the<sp/>functions<sp/>to<sp/>avoid<sp/>all<sp/>the</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>nasty<sp/>forward<sp/>declarations.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>For<sp/>easier<sp/>reading,<sp/>we<sp/>ignore<sp/>all<sp/>memory-allocation<sp/>errors<sp/>of<sp/>malloc()<sp/>and</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>friends<sp/>here.<sp/>However,<sp/>we<sp/>try<sp/>to<sp/>correctly<sp/>handle<sp/>all<sp/>other<sp/>kinds<sp/>of<sp/>errors</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>that<sp/>may<sp/>occur.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>All<sp/>functions<sp/>and<sp/>global<sp/>variables<sp/>are<sp/>prefixed<sp/>with<sp/>&quot;modeset_*&quot;<sp/>in<sp/>this</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>file.<sp/>So<sp/>it<sp/>should<sp/>be<sp/>clear<sp/>whether<sp/>a<sp/>function<sp/>is<sp/>a<sp/>local<sp/>helper<sp/>or<sp/>if<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>provided<sp/>by<sp/>some<sp/>external<sp/>library.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_GNU_SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;read.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xf86drm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xf86drmMode.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeset_find_crtc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>drmModeRes*<sp/>res,<sp/>drmModeConnector*<sp/>conn,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>dev);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeset_create_fb(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>dev);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeset_setup_dev(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>drmModeRes*<sp/>res,<sp/>drmModeConnector*<sp/>conn,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>dev);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeset_open(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>node);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeset_prepare(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>modeset_draw(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlen,<sp/>uint8_t*<sp/>data);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>modeset_cleanup(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>When<sp/>the<sp/>linux<sp/>kernel<sp/>detects<sp/>a<sp/>graphics-card<sp/>on<sp/>your<sp/>machine,<sp/>it<sp/>loads<sp/>the</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>correct<sp/>device<sp/>driver<sp/>(located<sp/>in<sp/>kernel-tree<sp/>at<sp/>./drivers/gpu/drm/&lt;xy&gt;)<sp/>and</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>provides<sp/>two<sp/>character-devices<sp/>to<sp/>control<sp/>it.<sp/>Udev<sp/>(or<sp/>whatever<sp/>hotplugging</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>application<sp/>you<sp/>use)<sp/>will<sp/>create<sp/>them<sp/>as:</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>/dev/dri/card0</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>/dev/dri/controlID64</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>We<sp/>only<sp/>need<sp/>the<sp/>first<sp/>one.<sp/>You<sp/>can<sp/>hard-code<sp/>this<sp/>path<sp/>into<sp/>your<sp/>application</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>like<sp/>we<sp/>do<sp/>here,<sp/>but<sp/>it<sp/>is<sp/>recommended<sp/>to<sp/>use<sp/>libudev<sp/>with<sp/>real<sp/>hotplugging</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>and<sp/>multi-seat<sp/>support.<sp/>However,<sp/>this<sp/>is<sp/>beyond<sp/>the<sp/>scope<sp/>of<sp/>this<sp/>document.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>Also<sp/>note<sp/>that<sp/>if<sp/>you<sp/>have<sp/>multiple<sp/>graphics-cards,<sp/>there<sp/>may<sp/>also<sp/>be</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>/dev/dri/card1,<sp/>/dev/dri/card2,<sp/>...</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>We<sp/>simply<sp/>use<sp/>/dev/dri/card0<sp/>here<sp/>but<sp/>the<sp/>user<sp/>can<sp/>specify<sp/>another<sp/>path<sp/>on</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>the<sp/>command<sp/>line.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>modeset_open(out,<sp/>node):<sp/>This<sp/>small<sp/>helper<sp/>function<sp/>opens<sp/>the<sp/>DRM<sp/>device</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>which<sp/>is<sp/>given<sp/>as<sp/>@node.<sp/>The<sp/>new<sp/>fd<sp/>is<sp/>stored<sp/>in<sp/>@out<sp/>on<sp/>success.<sp/>On<sp/>failure,</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>a<sp/>negative<sp/>error<sp/>code<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>After<sp/>opening<sp/>the<sp/>file,<sp/>we<sp/>also<sp/>check<sp/>for<sp/>the<sp/>DRM_CAP_DUMB_BUFFER<sp/>capability.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>driver<sp/>supports<sp/>this<sp/>capability,<sp/>we<sp/>can<sp/>create<sp/>simple<sp/>memory-mapped</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>buffers<sp/>without<sp/>any<sp/>driver-dependent<sp/>code.<sp/>As<sp/>we<sp/>want<sp/>to<sp/>avoid<sp/>any<sp/>radeon,</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>nvidia,<sp/>intel,<sp/>etc.<sp/>specific<sp/>code,<sp/>we<sp/>depend<sp/>on<sp/>DUMB_BUFFERs<sp/>here.</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeset_open(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>ret;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>has_dumb;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>fd<sp/>=<sp/>open(node,<sp/>O_RDWR<sp/>|<sp/>O_CLOEXEC);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-errno;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>&apos;%s&apos;:<sp/>%m\n&quot;</highlight><highlight class="normal">,<sp/>node);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drmGetCap(fd,<sp/>DRM_CAP_DUMB_BUFFER,<sp/>&amp;has_dumb)<sp/>&lt;<sp/>0<sp/>||<sp/>!has_dumb)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;drm<sp/>device<sp/>&apos;%s&apos;<sp/>does<sp/>not<sp/>support<sp/>dumb<sp/>buffers\n&quot;</highlight><highlight class="normal">,<sp/>node);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EOPNOTSUPP;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>fd;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>As<sp/>a<sp/>next<sp/>step<sp/>we<sp/>need<sp/>to<sp/>find<sp/>our<sp/>available<sp/>display<sp/>devices.<sp/>libdrm<sp/>provides</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>a<sp/>drmModeRes<sp/>structure<sp/>that<sp/>contains<sp/>all<sp/>the<sp/>needed<sp/>information.<sp/>We<sp/>can</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>retrieve<sp/>it<sp/>via<sp/>drmModeGetResources(fd)<sp/>and<sp/>free<sp/>it<sp/>via</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>drmModeFreeResources(res)<sp/>again.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>A<sp/>physical<sp/>connector<sp/>on<sp/>your<sp/>graphics<sp/>card<sp/>is<sp/>called<sp/>a<sp/>&quot;connector&quot;.<sp/>You<sp/>can</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>plug<sp/>a<sp/>monitor<sp/>into<sp/>it<sp/>and<sp/>control<sp/>what<sp/>is<sp/>displayed.<sp/>We<sp/>are<sp/>definitely</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>interested<sp/>in<sp/>what<sp/>connectors<sp/>are<sp/>currently<sp/>used,<sp/>so<sp/>we<sp/>simply<sp/>iterate</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>through<sp/>the<sp/>list<sp/>of<sp/>connectors<sp/>and<sp/>try<sp/>to<sp/>display<sp/>a<sp/>test-picture<sp/>on<sp/>each</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>available<sp/>monitor.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>However,<sp/>this<sp/>isn&apos;t<sp/>as<sp/>easy<sp/>as<sp/>it<sp/>sounds.<sp/>First,<sp/>we<sp/>need<sp/>to<sp/>check<sp/>whether<sp/>the</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>connector<sp/>is<sp/>actually<sp/>used<sp/>(a<sp/>monitor<sp/>is<sp/>plugged<sp/>in<sp/>and<sp/>turned<sp/>on).<sp/>Then<sp/>we</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>need<sp/>to<sp/>find<sp/>a<sp/>CRTC<sp/>that<sp/>can<sp/>control<sp/>this<sp/>connector.<sp/>CRTCs<sp/>are<sp/>described</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>later<sp/>on.<sp/>After<sp/>that<sp/>we<sp/>create<sp/>a<sp/>framebuffer<sp/>object.<sp/>If<sp/>we<sp/>have<sp/>all<sp/>this,<sp/>we</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>can<sp/>mmap()<sp/>the<sp/>framebuffer<sp/>and<sp/>draw<sp/>a<sp/>test-picture<sp/>into<sp/>it.<sp/>Then<sp/>we<sp/>can<sp/>tell</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>the<sp/>DRM<sp/>device<sp/>to<sp/>show<sp/>the<sp/>framebuffer<sp/>on<sp/>the<sp/>given<sp/>CRTC<sp/>with<sp/>the<sp/>selected</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>connector.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>As<sp/>we<sp/>want<sp/>to<sp/>draw<sp/>moving<sp/>pictures<sp/>on<sp/>the<sp/>framebuffer,<sp/>we<sp/>actually<sp/>have<sp/>to</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>remember<sp/>all<sp/>these<sp/>settings.<sp/>Therefore,<sp/>we<sp/>create<sp/>one<sp/>&quot;struct<sp/>modeset_dev&quot;</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>object<sp/>for<sp/>each<sp/>connector+crtc+framebuffer<sp/>pair<sp/>that<sp/>we<sp/>successfully</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>initialized<sp/>and<sp/>push<sp/>it<sp/>into<sp/>the<sp/>global<sp/>device-list.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>Each<sp/>field<sp/>of<sp/>this<sp/>structure<sp/>is<sp/>described<sp/>when<sp/>it<sp/>is<sp/>first<sp/>used.<sp/>But<sp/>as<sp/>a</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>summary:</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>&quot;struct<sp/>modeset_dev&quot;<sp/>contains:<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@next:<sp/>points<sp/>to<sp/>the<sp/>next<sp/>device<sp/>in<sp/>the<sp/>single-linked<sp/>list</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@width:<sp/>width<sp/>of<sp/>our<sp/>buffer<sp/>object</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@height:<sp/>height<sp/>of<sp/>our<sp/>buffer<sp/>object</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@stride:<sp/>stride<sp/>value<sp/>of<sp/>our<sp/>buffer<sp/>object</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@size:<sp/>size<sp/>of<sp/>the<sp/>memory<sp/>mapped<sp/>buffer</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@handle:<sp/>a<sp/>DRM<sp/>handle<sp/>to<sp/>the<sp/>buffer<sp/>object<sp/>that<sp/>we<sp/>can<sp/>draw<sp/>into</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@map:<sp/>pointer<sp/>to<sp/>the<sp/>memory<sp/>mapped<sp/>buffer</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@mode:<sp/>the<sp/>display<sp/>mode<sp/>that<sp/>we<sp/>want<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@fb:<sp/>a<sp/>framebuffer<sp/>handle<sp/>with<sp/>our<sp/>buffer<sp/>object<sp/>as<sp/>scanout<sp/>buffer</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@conn:<sp/>the<sp/>connector<sp/>ID<sp/>that<sp/>we<sp/>want<sp/>to<sp/>use<sp/>with<sp/>this<sp/>buffer</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@crtc:<sp/>the<sp/>crtc<sp/>ID<sp/>that<sp/>we<sp/>want<sp/>to<sp/>use<sp/>with<sp/>this<sp/>connector</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>@saved_crtc:<sp/>the<sp/>configuration<sp/>of<sp/>the<sp/>crtc<sp/>before<sp/>we<sp/>changed<sp/>it.<sp/>We<sp/>use<sp/>it</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>we<sp/>can<sp/>restore<sp/>the<sp/>same<sp/>mode<sp/>when<sp/>we<sp/>exit.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="structmodeset__dev" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>next;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>width;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>height;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>stride;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>size;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>handle;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>map;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>drmModeModeInfo<sp/>mode;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>fb;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>conn;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>crtc;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>drmModeCrtc*<sp/>saved_crtc;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>modeset_list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>So<sp/>as<sp/>next<sp/>step<sp/>we<sp/>need<sp/>to<sp/>actually<sp/>prepare<sp/>all<sp/>connectors<sp/>that<sp/>we<sp/>find.<sp/>We</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>do<sp/>this<sp/>in<sp/>this<sp/>little<sp/>helper<sp/>function:</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>modeset_prepare(fd):<sp/>This<sp/>helper<sp/>function<sp/>takes<sp/>the<sp/>DRM<sp/>fd<sp/>as<sp/>argument<sp/>and</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>then<sp/>simply<sp/>retrieves<sp/>the<sp/>resource-info<sp/>from<sp/>the<sp/>device.<sp/>It<sp/>then<sp/>iterates</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>through<sp/>all<sp/>connectors<sp/>and<sp/>calls<sp/>other<sp/>helper<sp/>functions<sp/>to<sp/>initialize<sp/>this</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>connector<sp/>(described<sp/>later<sp/>on).</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>initialization<sp/>was<sp/>successful,<sp/>we<sp/>simply<sp/>add<sp/>this<sp/>object<sp/>as<sp/>new<sp/>device</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>into<sp/>the<sp/>global<sp/>modeset<sp/>device<sp/>list.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>The<sp/>resource-structure<sp/>contains<sp/>a<sp/>list<sp/>of<sp/>all<sp/>connector-IDs.<sp/>We<sp/>use<sp/>the</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>helper<sp/>function<sp/>drmModeGetConnector()<sp/>to<sp/>retrieve<sp/>more<sp/>information<sp/>on<sp/>each</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>connector.<sp/>After<sp/>we<sp/>are<sp/>done<sp/>with<sp/>it,<sp/>we<sp/>free<sp/>it<sp/>again<sp/>with</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>drmModeFreeConnector().</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>Our<sp/>helper<sp/>modeset_setup_dev()<sp/>returns<sp/>-ENOENT<sp/>if<sp/>the<sp/>connector<sp/>is<sp/>currently</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>unused<sp/>and<sp/>no<sp/>monitor<sp/>is<sp/>plugged<sp/>in.<sp/>So<sp/>we<sp/>can<sp/>ignore<sp/>this<sp/>connector.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeset_prepare(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>drmModeRes*<sp/>res;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>drmModeConnector*<sp/>conn;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>dev;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>retrieve<sp/>resources<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>drmModeGetResources(fd);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!res)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>retrieve<sp/>DRM<sp/>resources<sp/>(%d):<sp/>%m\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-errno;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>iterate<sp/>all<sp/>connectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>res-&gt;count_connectors;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>information<sp/>for<sp/>each<sp/>connector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conn<sp/>=<sp/>drmModeGetConnector(fd,<sp/>res-&gt;connectors[i]);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!conn)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>retrieve<sp/>DRM<sp/>connector<sp/>%u:%u<sp/>(%d):<sp/>%m\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>res-&gt;connectors[i],</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(conn-&gt;connector_id<sp/>==<sp/>93)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>a<sp/>device<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dev));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(dev,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dev));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;conn<sp/>=<sp/>conn-&gt;connector_id;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>call<sp/>helper<sp/>function<sp/>to<sp/>prepare<sp/>this<sp/>connector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>modeset_setup_dev(fd,<sp/>res,<sp/>conn,<sp/>dev);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>-ENOENT)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>-ret;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>setup<sp/>device<sp/>for<sp/>connector<sp/>%u:%u<sp/>(%d):<sp/>%m\n&quot;</highlight><highlight class="normal">,<sp/>i,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;connectors[i],<sp/>errno);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(dev);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeFreeConnector(conn);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>connector<sp/>data<sp/>and<sp/>link<sp/>device<sp/>into<sp/>global<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeFreeConnector(conn);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;next<sp/>=<sp/>modeset_list;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modeset_list<sp/>=<sp/>dev;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>resources<sp/>again<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>drmModeFreeResources(res);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>Now<sp/>we<sp/>dig<sp/>deeper<sp/>into<sp/>setting<sp/>up<sp/>a<sp/>single<sp/>connector.<sp/>As<sp/>described<sp/>earlier,</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>we<sp/>need<sp/>to<sp/>check<sp/>several<sp/>things<sp/>first:</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>connector<sp/>is<sp/>currently<sp/>unused,<sp/>that<sp/>is,<sp/>no<sp/>monitor<sp/>is<sp/>plugged<sp/>in,</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>then<sp/>we<sp/>can<sp/>ignore<sp/>it.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>We<sp/>have<sp/>to<sp/>find<sp/>a<sp/>suitable<sp/>resolution<sp/>and<sp/>refresh-rate.<sp/>All<sp/>this<sp/>is</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>available<sp/>in<sp/>drmModeModeInfo<sp/>structures<sp/>saved<sp/>for<sp/>each<sp/>crtc.<sp/>We<sp/>simply</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>use<sp/>the<sp/>first<sp/>mode<sp/>that<sp/>is<sp/>available.<sp/>This<sp/>is<sp/>always<sp/>the<sp/>mode<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>highest<sp/>resolution.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>A<sp/>more<sp/>sophisticated<sp/>mode-selection<sp/>should<sp/>be<sp/>done<sp/>in<sp/>real<sp/>applications,</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>though.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>Then<sp/>we<sp/>need<sp/>to<sp/>find<sp/>an<sp/>CRTC<sp/>that<sp/>can<sp/>drive<sp/>this<sp/>connector.<sp/>A<sp/>CRTC<sp/>is<sp/>an</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>internal<sp/>resource<sp/>of<sp/>each<sp/>graphics-card.<sp/>The<sp/>number<sp/>of<sp/>CRTCs<sp/>controls<sp/>how</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>many<sp/>connectors<sp/>can<sp/>be<sp/>controlled<sp/>indepedently.<sp/>That<sp/>is,<sp/>a<sp/>graphics-cards</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>may<sp/>have<sp/>more<sp/>connectors<sp/>than<sp/>CRTCs,<sp/>which<sp/>means,<sp/>not<sp/>all<sp/>monitors<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>controlled<sp/>independently.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>There<sp/>is<sp/>actually<sp/>the<sp/>possibility<sp/>to<sp/>control<sp/>multiple<sp/>connectors<sp/>via<sp/>a</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>single<sp/>CRTC<sp/>if<sp/>the<sp/>monitors<sp/>should<sp/>display<sp/>the<sp/>same<sp/>content.<sp/>However,<sp/>we</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>do<sp/>not<sp/>make<sp/>use<sp/>of<sp/>this<sp/>here.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>So<sp/>think<sp/>of<sp/>connectors<sp/>as<sp/>pipelines<sp/>to<sp/>the<sp/>connected<sp/>monitors<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>CRTCs<sp/>are<sp/>the<sp/>controllers<sp/>that<sp/>manage<sp/>which<sp/>data<sp/>goes<sp/>to<sp/>which<sp/>pipeline.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>If<sp/>there<sp/>are<sp/>more<sp/>pipelines<sp/>than<sp/>CRTCs,<sp/>then<sp/>we<sp/>cannot<sp/>control<sp/>all<sp/>of</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>them<sp/>at<sp/>the<sp/>same<sp/>time.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>We<sp/>need<sp/>to<sp/>create<sp/>a<sp/>framebuffer<sp/>for<sp/>this<sp/>connector.<sp/>A<sp/>framebuffer<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>memory<sp/>buffer<sp/>that<sp/>we<sp/>can<sp/>write<sp/>XRGB32<sp/>data<sp/>into.<sp/>So<sp/>we<sp/>use<sp/>this<sp/>to</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>render<sp/>our<sp/>graphics<sp/>and<sp/>then<sp/>the<sp/>CRTC<sp/>can<sp/>scan-out<sp/>this<sp/>data<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>framebuffer<sp/>onto<sp/>the<sp/>monitor.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeset_setup_dev(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>drmModeRes*<sp/>res,<sp/>drmModeConnector*<sp/>conn,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>dev)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>a<sp/>monitor<sp/>is<sp/>connected<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conn-&gt;connection<sp/>!=<sp/>DRM_MODE_CONNECTED)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;ignoring<sp/>unused<sp/>connector<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>conn-&gt;connector_id);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-ENOENT;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>there<sp/>is<sp/>at<sp/>least<sp/>one<sp/>valid<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conn-&gt;count_modes<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>valid<sp/>mode<sp/>for<sp/>connector<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>conn-&gt;connector_id);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EFAULT;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>mode<sp/>information<sp/>into<sp/>our<sp/>device<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;dev-&gt;mode,<sp/>&amp;conn-&gt;modes[0],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dev-&gt;mode));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;width<sp/>=<sp/>conn-&gt;modes[0].hdisplay;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;height<sp/>=<sp/>conn-&gt;modes[0].vdisplay;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*fprintf(stderr,<sp/>&quot;mode<sp/>for<sp/>connector<sp/>%u<sp/>is<sp/>%ux%u\n&quot;,<sp/>conn-&gt;connector_id,<sp/>dev-&gt;width,</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;height);</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>a<sp/>crtc<sp/>for<sp/>this<sp/>connector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>modeset_find_crtc(fd,<sp/>res,<sp/>conn,<sp/>dev);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>valid<sp/>crtc<sp/>for<sp/>connector<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>conn-&gt;connector_id);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>a<sp/>framebuffer<sp/>for<sp/>this<sp/>CRTC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>modeset_create_fb(fd,<sp/>dev);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>create<sp/>framebuffer<sp/>for<sp/>connector<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>conn-&gt;connector_id);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>modeset_find_crtc(fd,<sp/>res,<sp/>conn,<sp/>dev):<sp/>This<sp/>small<sp/>helper<sp/>tries<sp/>to<sp/>find<sp/>a</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/>suitable<sp/>CRTC<sp/>for<sp/>the<sp/>given<sp/>connector.<sp/>We<sp/>have<sp/>actually<sp/>have<sp/>to<sp/>introduce<sp/>one</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>more<sp/>DRM<sp/>object<sp/>to<sp/>make<sp/>this<sp/>more<sp/>clear:<sp/>Encoders.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>Encoders<sp/>help<sp/>the<sp/>CRTC<sp/>to<sp/>convert<sp/>data<sp/>from<sp/>a<sp/>framebuffer<sp/>into<sp/>the<sp/>right</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>format<sp/>that<sp/>can<sp/>be<sp/>used<sp/>for<sp/>the<sp/>chosen<sp/>connector.<sp/>We<sp/>do<sp/>not<sp/>have<sp/>to</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>understand<sp/>any<sp/>more<sp/>of<sp/>these<sp/>conversions<sp/>to<sp/>make<sp/>use<sp/>of<sp/>it.<sp/>However,<sp/>you<sp/>must</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>know<sp/>that<sp/>each<sp/>connector<sp/>has<sp/>a<sp/>limited<sp/>list<sp/>of<sp/>encoders<sp/>that<sp/>it<sp/>can<sp/>use.<sp/>And</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>each<sp/>encoder<sp/>can<sp/>only<sp/>work<sp/>with<sp/>a<sp/>limited<sp/>list<sp/>of<sp/>CRTCs.<sp/>So<sp/>what<sp/>we<sp/>do<sp/>is</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>trying<sp/>each<sp/>encoder<sp/>that<sp/>is<sp/>available<sp/>and<sp/>looking<sp/>for<sp/>a<sp/>CRTC<sp/>that<sp/>this</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>encoder<sp/>can<sp/>work<sp/>with.<sp/>If<sp/>we<sp/>find<sp/>the<sp/>first<sp/>working<sp/>combination,<sp/>we<sp/>are<sp/>happy</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>and<sp/>write<sp/>it<sp/>into<sp/>the<sp/>@dev<sp/>structure.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>But<sp/>before<sp/>iterating<sp/>all<sp/>available<sp/>encoders,<sp/>we<sp/>first<sp/>try<sp/>the<sp/>currently</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>active<sp/>encoder+crtc<sp/>on<sp/>a<sp/>connector<sp/>to<sp/>avoid<sp/>a<sp/>full<sp/>modeset.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>However,<sp/>before<sp/>we<sp/>can<sp/>use<sp/>a<sp/>CRTC<sp/>we<sp/>must<sp/>make<sp/>sure<sp/>that<sp/>no<sp/>other<sp/>device,</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>that<sp/>we<sp/>setup<sp/>previously,<sp/>is<sp/>already<sp/>using<sp/>this<sp/>CRTC.<sp/>Remember,<sp/>we<sp/>can<sp/>only</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>drive<sp/>one<sp/>connector<sp/>per<sp/>CRTC!<sp/>So<sp/>we<sp/>simply<sp/>iterate<sp/>through<sp/>the<sp/>&quot;modeset_list&quot;</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>of<sp/>previously<sp/>setup<sp/>devices<sp/>and<sp/>check<sp/>that<sp/>this<sp/>CRTC<sp/>wasn&apos;t<sp/>used<sp/>before.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>Otherwise,<sp/>we<sp/>continue<sp/>with<sp/>the<sp/>next<sp/>CRTC/Encoder<sp/>combination.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeset_find_crtc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>drmModeRes*<sp/>res,<sp/>drmModeConnector*<sp/>conn,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>dev)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>drmModeEncoder*<sp/>enc;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>crtc;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>iter;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>try<sp/>the<sp/>currently<sp/>conected<sp/>encoder+crtc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conn-&gt;encoder_id)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enc<sp/>=<sp/>drmModeGetEncoder(fd,<sp/>conn-&gt;encoder_id);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enc)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enc-&gt;crtc_id)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crtc<sp/>=<sp/>enc-&gt;crtc_id;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>modeset_list;<sp/>iter;<sp/>iter<sp/>=<sp/>iter-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter-&gt;crtc<sp/>==<sp/>crtc)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crtc<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(crtc<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeFreeEncoder(enc);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;crtc<sp/>=<sp/>crtc;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeFreeEncoder(enc);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>connector<sp/>is<sp/>not<sp/>currently<sp/>bound<sp/>to<sp/>an<sp/>encoder<sp/>or<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>encoder+crtc<sp/>is<sp/>already<sp/>used<sp/>by<sp/>another<sp/>connector<sp/>(actually<sp/>unlikely</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>but<sp/>lets<sp/>be<sp/>safe),<sp/>iterate<sp/>all<sp/>other<sp/>available<sp/>encoders<sp/>to<sp/>find<sp/>a</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>matching<sp/>CRTC.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>conn-&gt;count_encoders;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enc<sp/>=<sp/>drmModeGetEncoder(fd,<sp/>conn-&gt;encoders[i]);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!enc)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>retrieve<sp/>encoder<sp/>%u:%u<sp/>(%d):<sp/>%m\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>conn-&gt;encoders[i],</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>iterate<sp/>all<sp/>global<sp/>CRTCs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>res-&gt;count_crtcs;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>whether<sp/>this<sp/>CRTC<sp/>works<sp/>with<sp/>the<sp/>encoder<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(enc-&gt;possible_crtcs<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>j)))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>that<sp/>no<sp/>other<sp/>device<sp/>already<sp/>uses<sp/>this<sp/>CRTC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crtc<sp/>=<sp/>res-&gt;crtcs[j];</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>modeset_list;<sp/>iter;<sp/>iter<sp/>=<sp/>iter-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter-&gt;crtc<sp/>==<sp/>crtc)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crtc<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>have<sp/>found<sp/>a<sp/>CRTC,<sp/>so<sp/>save<sp/>it<sp/>and<sp/>return<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(crtc<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeFreeEncoder(enc);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;crtc<sp/>=<sp/>crtc;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeFreeEncoder(enc);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>find<sp/>suitable<sp/>CRTC<sp/>for<sp/>connector<sp/>%u\n&quot;</highlight><highlight class="normal">,<sp/>conn-&gt;connector_id);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-ENOENT;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/>modeset_create_fb(fd,<sp/>dev):<sp/>After<sp/>we<sp/>have<sp/>found<sp/>a<sp/>crtc+connector+mode</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/>combination,<sp/>we<sp/>need<sp/>to<sp/>actually<sp/>create<sp/>a<sp/>suitable<sp/>framebuffer<sp/>that<sp/>we<sp/>can</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>use<sp/>with<sp/>it.<sp/>There<sp/>are<sp/>actually<sp/>two<sp/>ways<sp/>to<sp/>do<sp/>that:</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>We<sp/>can<sp/>create<sp/>a<sp/>so<sp/>called<sp/>&quot;dumb<sp/>buffer&quot;.<sp/>This<sp/>is<sp/>a<sp/>buffer<sp/>that<sp/>we<sp/>can</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>memory-map<sp/>via<sp/>mmap()<sp/>and<sp/>every<sp/>driver<sp/>supports<sp/>this.<sp/>We<sp/>can<sp/>use<sp/>it<sp/>for</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>unaccelerated<sp/>software<sp/>rendering<sp/>on<sp/>the<sp/>CPU.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/><sp/><sp/>*<sp/>We<sp/>can<sp/>use<sp/>libgbm<sp/>to<sp/>create<sp/>buffers<sp/>available<sp/>for<sp/>hardware-acceleration.</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>libgbm<sp/>is<sp/>an<sp/>abstraction<sp/>layer<sp/>that<sp/>creates<sp/>these<sp/>buffers<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>available<sp/>DRM<sp/>driver.<sp/>As<sp/>there<sp/>is<sp/>no<sp/>generic<sp/>API<sp/>for<sp/>this,<sp/>each<sp/>driver</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>provides<sp/>its<sp/>own<sp/>way<sp/>to<sp/>create<sp/>these<sp/>buffers.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>We<sp/>can<sp/>then<sp/>use<sp/>such<sp/>buffers<sp/>to<sp/>create<sp/>OpenGL<sp/>contexts<sp/>with<sp/>the<sp/>mesa3D</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>library.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/>We<sp/>use<sp/>the<sp/>first<sp/>solution<sp/>here<sp/>as<sp/>it<sp/>is<sp/>much<sp/>simpler<sp/>and<sp/>doesn&apos;t<sp/>require<sp/>any</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/>external<sp/>libraries.<sp/>However,<sp/>if<sp/>you<sp/>want<sp/>to<sp/>use<sp/>hardware-acceleration<sp/>via</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/>OpenGL,<sp/>it<sp/>is<sp/>actually<sp/>pretty<sp/>easy<sp/>to<sp/>create<sp/>such<sp/>buffers<sp/>with<sp/>libgbm<sp/>and</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>libEGL.<sp/>But<sp/>this<sp/>is<sp/>beyond<sp/>the<sp/>scope<sp/>of<sp/>this<sp/>document.</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>So<sp/>what<sp/>we<sp/>do<sp/>is<sp/>requesting<sp/>a<sp/>new<sp/>dumb-buffer<sp/>from<sp/>the<sp/>driver.<sp/>We<sp/>specify<sp/>the</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>same<sp/>size<sp/>as<sp/>the<sp/>current<sp/>mode<sp/>that<sp/>we<sp/>selected<sp/>for<sp/>the<sp/>connector.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/>Then<sp/>we<sp/>request<sp/>the<sp/>driver<sp/>to<sp/>prepare<sp/>this<sp/>buffer<sp/>for<sp/>memory<sp/>mapping.<sp/>After</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>that<sp/>we<sp/>perform<sp/>the<sp/>actual<sp/>mmap()<sp/>call.<sp/>So<sp/>we<sp/>can<sp/>now<sp/>access<sp/>the<sp/>framebuffer</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/>memory<sp/>directly<sp/>via<sp/>the<sp/>dev-&gt;map<sp/>memory<sp/>map.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modeset_create_fb(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>dev)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">drm_mode_create_dumb<sp/>creq;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">drm_mode_destroy_dumb<sp/>dreq;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">drm_mode_map_dumb<sp/>mreq;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>dumb<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;creq,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(creq));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>creq.width<sp/>=<sp/>dev-&gt;width;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>creq.height<sp/>=<sp/>dev-&gt;height;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>creq.bpp<sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>drmIoctl(fd,<sp/>DRM_IOCTL_MODE_CREATE_DUMB,<sp/>&amp;creq);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>create<sp/>dumb<sp/>buffer<sp/>(%d):<sp/>%m\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-errno;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;stride<sp/>=<sp/>creq.pitch;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;size<sp/>=<sp/>creq.size;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;handle<sp/>=<sp/>creq.handle;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>framebuffer<sp/>object<sp/>for<sp/>the<sp/>dumb-buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>drmModeAddFB(fd,<sp/>dev-&gt;width,<sp/>dev-&gt;height,<sp/>24,<sp/>24,<sp/>dev-&gt;stride,<sp/>dev-&gt;handle,<sp/>&amp;dev-&gt;fb);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>create<sp/>framebuffer<sp/>(%d):<sp/>%m\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-errno;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err_destroy;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>prepare<sp/>buffer<sp/>for<sp/>memory<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;mreq,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mreq));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>mreq.handle<sp/>=<sp/>dev-&gt;handle;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>drmIoctl(fd,<sp/>DRM_IOCTL_MODE_MAP_DUMB,<sp/>&amp;mreq);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>map<sp/>dumb<sp/>buffer<sp/>(%d):<sp/>%m\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-errno;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err_fb;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>perform<sp/>actual<sp/>memory<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;map<sp/>=<sp/>mmap(0,<sp/>dev-&gt;size,<sp/>PROT_READ<sp/>|<sp/>PROT_WRITE,<sp/>MAP_SHARED,<sp/>fd,<sp/>mreq.offset);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;map<sp/>==<sp/>MAP_FAILED)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>mmap<sp/>dumb<sp/>buffer<sp/>(%d):<sp/>%m\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-errno;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err_fb;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>the<sp/>framebuffer<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(dev-&gt;map,<sp/>0,<sp/>dev-&gt;size);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">err_fb:</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>drmModeRmFB(fd,<sp/>dev-&gt;fb);</highlight></codeline>
<codeline lineno="488"><highlight class="normal">err_destroy:</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;dreq,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dreq));</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>dreq.handle<sp/>=<sp/>dev-&gt;handle;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>drmIoctl(fd,<sp/>DRM_IOCTL_MODE_DESTROY_DUMB,<sp/>&amp;dreq);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str_reverse_in_place(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p1<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p2<sp/>=<sp/>str<sp/>+<sp/>len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p1<sp/>&lt;<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>*p1;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p1++<sp/>=<sp/>*p2;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p2--<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*<sp/>Finally!<sp/>We<sp/>have<sp/>a<sp/>connector<sp/>with<sp/>a<sp/>suitable<sp/>CRTC.<sp/>We<sp/>know<sp/>which<sp/>mode<sp/>we<sp/>want</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*<sp/>to<sp/>use<sp/>and<sp/>we<sp/>have<sp/>a<sp/>framebuffer<sp/>of<sp/>the<sp/>correct<sp/>size<sp/>that<sp/>we<sp/>can<sp/>write<sp/>to.</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/>There<sp/>is<sp/>nothing<sp/>special<sp/>left<sp/>to<sp/>do.<sp/>We<sp/>only<sp/>have<sp/>to<sp/>program<sp/>the<sp/>CRTC<sp/>to</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/>connect<sp/>each<sp/>new<sp/>framebuffer<sp/>to<sp/>each<sp/>selected<sp/>connector<sp/>for<sp/>each<sp/>combination</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>that<sp/>we<sp/>saved<sp/>in<sp/>the<sp/>global<sp/>modeset_list.</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>done<sp/>with<sp/>a<sp/>call<sp/>to<sp/>drmModeSetCrtc().</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/>So<sp/>we<sp/>are<sp/>ready<sp/>for<sp/>our<sp/>main()<sp/>function.<sp/>First<sp/>we<sp/>check<sp/>whether<sp/>the<sp/>user</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/>specified<sp/>a<sp/>DRM<sp/>device<sp/>on<sp/>the<sp/>command<sp/>line,<sp/>otherwise<sp/>we<sp/>use<sp/>the<sp/>default</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/>/dev/dri/card0.<sp/>Then<sp/>we<sp/>open<sp/>the<sp/>device<sp/>via<sp/>modeset_open().<sp/>modeset_prepare()</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*<sp/>prepares<sp/>all<sp/>connectors<sp/>and<sp/>we<sp/>can<sp/>loop<sp/>over<sp/>&quot;modeset_list&quot;<sp/>and<sp/>call</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/>drmModeSetCrtc()<sp/>on<sp/>every<sp/>CRTC/connector<sp/>combination.</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>But<sp/>printing<sp/>empty<sp/>black<sp/>pages<sp/>is<sp/>boring<sp/>so<sp/>we<sp/>have<sp/>another<sp/>helper<sp/>function</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*<sp/>modeset_draw()<sp/>that<sp/>draws<sp/>some<sp/>colors<sp/>into<sp/>the<sp/>framebuffer<sp/>for<sp/>5<sp/>seconds<sp/>and</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>then<sp/>returns.<sp/>And<sp/>then<sp/>we<sp/>have<sp/>all<sp/>the<sp/>cleanup<sp/>functions<sp/>which<sp/>correctly<sp/>free</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/>all<sp/>devices<sp/>again<sp/>after<sp/>we<sp/>used<sp/>them.<sp/>All<sp/>these<sp/>functions<sp/>are<sp/>described<sp/>below</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>the<sp/>main()<sp/>function.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/>As<sp/>a<sp/>side<sp/>note:<sp/>drmModeSetCrtc()<sp/>actually<sp/>takes<sp/>a<sp/>list<sp/>of<sp/>connectors<sp/>that<sp/>we</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>want<sp/>to<sp/>control<sp/>with<sp/>this<sp/>CRTC.<sp/>We<sp/>pass<sp/>only<sp/>one<sp/>connector,<sp/>though.<sp/>As</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/>explained<sp/>earlier,<sp/>if<sp/>we<sp/>used<sp/>multiple<sp/>connectors,<sp/>then<sp/>all<sp/>connectors<sp/>would</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*<sp/>have<sp/>the<sp/>same<sp/>controlling<sp/>framebuffer<sp/>so<sp/>the<sp/>output<sp/>would<sp/>be<sp/>cloned.<sp/>This<sp/>is</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*<sp/>most<sp/>often<sp/>not<sp/>what<sp/>you<sp/>want<sp/>so<sp/>we<sp/>avoid<sp/>explaining<sp/>this<sp/>feature<sp/>here.</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*<sp/>Furthermore,<sp/>all<sp/>connectors<sp/>will<sp/>have<sp/>to<sp/>run<sp/>with<sp/>the<sp/>same<sp/>mode,<sp/>which<sp/>is</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*<sp/>also<sp/>often<sp/>not<sp/>guaranteed.<sp/>So<sp/>instead,<sp/>we<sp/>only<sp/>use<sp/>one<sp/>connector<sp/>per<sp/>CRTC.</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*<sp/>Before<sp/>calling<sp/>drmModeSetCrtc()<sp/>we<sp/>also<sp/>save<sp/>the<sp/>current<sp/>CRTC<sp/>configuration.</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>used<sp/>in<sp/>modeset_cleanup()<sp/>to<sp/>restore<sp/>the<sp/>CRTC<sp/>to<sp/>the<sp/>same<sp/>mode<sp/>as<sp/>was</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/>before<sp/>we<sp/>changed<sp/>it.</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*<sp/>If<sp/>we<sp/>don&apos;t<sp/>do<sp/>this,<sp/>the<sp/>screen<sp/>will<sp/>stay<sp/>blank<sp/>after<sp/>we<sp/>exit<sp/>until<sp/>another</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/>application<sp/>performs<sp/>modesetting<sp/>itself.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fpga_write(uint8_t*<sp/>argv,<sp/>uint32_t<sp/>dlen)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret,<sp/>fd;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>card;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>iter;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>which<sp/>DRM<sp/>device<sp/>to<sp/>open<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>card<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/dev/dri/card0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*fprintf(stderr,<sp/>&quot;using<sp/>card<sp/>&apos;%s&apos;\n&quot;,<sp/>card);</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*xprintf(argv,<sp/>dlen);</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>open<sp/>the<sp/>DRM<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>modeset_open(&amp;fd,<sp/>card);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_return;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>prepare<sp/>all<sp/>connectors<sp/>and<sp/>CRTCs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>modeset_prepare(fd);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_close;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>perform<sp/>actual<sp/>modesetting<sp/>on<sp/>each<sp/>found<sp/>connector+CRTC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>modeset_list;<sp/>iter;<sp/>iter<sp/>=<sp/>iter-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;saved_crtc<sp/>=<sp/>drmModeGetCrtc(fd,<sp/>iter-&gt;crtc);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>drmModeSetCrtc(fd,<sp/>iter-&gt;crtc,<sp/>iter-&gt;fb,<sp/>0,<sp/>0,<sp/>&amp;iter-&gt;conn,<sp/>1,<sp/>&amp;iter-&gt;mode);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>set<sp/>CRTC<sp/>for<sp/>connector<sp/>%u<sp/>(%d):<sp/>%m\n&quot;</highlight><highlight class="normal">,<sp/>iter-&gt;conn,<sp/>errno);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>draw<sp/>some<sp/>colors<sp/>for<sp/>5seconds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*int<sp/>dlen<sp/>=<sp/>strlen(argv);</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*char<sp/>*data<sp/>=<sp/>(char*)calloc(sizeof(char),<sp/>dlen);</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*memcpy(data,<sp/>(char*)argv,<sp/>dlen);</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*modeset_draw(dlen,<sp/>str_reverse_in_place(data,<sp/>dlen));</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>modeset_draw(dlen,<sp/>argv);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>usleep(5000000);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*if<sp/>(memcmp(&quot;okay&quot;,<sp/>fpga_read(),<sp/>4)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*}</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cleanup<sp/>everything<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>modeset_cleanup(fd);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">out_close:</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="598"><highlight class="normal">out_return:</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>-ret;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;modeset<sp/>failed<sp/>with<sp/>error<sp/>%d:<sp/>%m\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*<sp/>A<sp/>short<sp/>helper<sp/>function<sp/>to<sp/>compute<sp/>a<sp/>changing<sp/>color<sp/>value.<sp/>No<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*<sp/>understand<sp/>it.</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>next_color(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>up,<sp/>uint8_t<sp/>cur,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mod)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>next;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>cur<sp/>+<sp/>(*up<sp/>?<sp/>1<sp/>:<sp/>-1)<sp/>*<sp/>(rand()<sp/>%<sp/>mod);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*up<sp/>&amp;&amp;<sp/>next<sp/>&lt;<sp/>cur)<sp/>||<sp/>(!*up<sp/>&amp;&amp;<sp/>next<sp/>&gt;<sp/>cur))<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*up<sp/>=<sp/>!*up;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>cur;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next;</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*<sp/>modeset_draw():<sp/>This<sp/>draws<sp/>a<sp/>solid<sp/>color<sp/>into<sp/>all<sp/>configured<sp/>framebuffers.</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/>*<sp/>Every<sp/>100ms<sp/>the<sp/>color<sp/>changes<sp/>to<sp/>a<sp/>slightly<sp/>different<sp/>color<sp/>so<sp/>we<sp/>get<sp/>some</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*<sp/>kind<sp/>of<sp/>smoothly<sp/>changing<sp/>color-gradient.</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/>The<sp/>color<sp/>calculation<sp/>can<sp/>be<sp/>ignored<sp/>as<sp/>it<sp/>is<sp/>pretty<sp/>boring.<sp/>So<sp/>the</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*<sp/>interesting<sp/>stuff<sp/>is<sp/>iterating<sp/>over<sp/>&quot;modeset_list&quot;<sp/>and<sp/>then<sp/>through<sp/>all<sp/>lines</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>and<sp/>width.<sp/>We<sp/>then<sp/>set<sp/>each<sp/>pixel<sp/>individually<sp/>to<sp/>the<sp/>current<sp/>color.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*<sp/>We<sp/>do<sp/>this<sp/>50<sp/>times<sp/>as<sp/>we<sp/>sleep<sp/>100ms<sp/>after<sp/>each<sp/>redraw<sp/>round.<sp/>This<sp/>makes</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*<sp/>50*100ms<sp/>=<sp/>5000ms<sp/>=<sp/>5s<sp/>so<sp/>it<sp/>takes<sp/>about<sp/>5seconds<sp/>to<sp/>finish<sp/>this<sp/>loop.</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/>*<sp/>Please<sp/>note<sp/>that<sp/>we<sp/>draw<sp/>directly<sp/>into<sp/>the<sp/>framebuffer.<sp/>This<sp/>means<sp/>that<sp/>you</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/>*<sp/>will<sp/>see<sp/>flickering<sp/>as<sp/>the<sp/>monitor<sp/>might<sp/>refresh<sp/>while<sp/>we<sp/>redraw<sp/>the<sp/>screen.</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*<sp/>To<sp/>avoid<sp/>this<sp/>you<sp/>would<sp/>need<sp/>to<sp/>use<sp/>two<sp/>framebuffers<sp/>and<sp/>a<sp/>call<sp/>to</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*<sp/>drmModeSetCrtc()<sp/>to<sp/>switch<sp/>between<sp/>both<sp/>buffers.</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*<sp/>You<sp/>can<sp/>also<sp/>use<sp/>drmModePageFlip()<sp/>to<sp/>do<sp/>a<sp/>vsync&apos;ed<sp/>pageflip.<sp/>But<sp/>this<sp/>is</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/>beyond<sp/>the<sp/>scope<sp/>of<sp/>this<sp/>document.</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>modeset_draw(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlen,<sp/>uint8_t*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfpga__frame" kindref="compound">fpga_frame</ref>*<sp/>f;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>r,<sp/>g,<sp/>b;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>r_up,<sp/>g_up,<sp/>b_up;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k=0,<sp/>off,<sp/>l;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>iter;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_t<sp/>start,<sp/>end;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*const<sp/>uint8_t<sp/>front_pad<sp/>=<sp/>0,<sp/>packet_var<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*c<sp/>=<sp/>(char<sp/>*)calloc(sizeof(char),<sp/>(dlen<sp/>+<sp/>front_pad<sp/>+<sp/>packet_var));</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*c[i+front_pad+12]<sp/>=<sp/>0xAA;</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*c[i+front_pad+13]<sp/>=<sp/>0xDD;</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter<sp/>=<sp/>modeset_list;<sp/>iter;<sp/>iter<sp/>=<sp/>iter-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>clock();</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>iter-&gt;height;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>iter-&gt;width<sp/>*<sp/>j;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride_off<sp/>=<sp/>iter-&gt;stride<sp/>*<sp/>j;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>iter-&gt;width;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pix<sp/>=<sp/>k<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>+<sp/>pix<sp/>&lt;=<sp/>dlen)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off<sp/>=<sp/>width<sp/>+<sp/>pix;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>data[off];</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>data[off<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>data[off<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*if<sp/>(off<sp/>&lt;<sp/>front_pad<sp/>+<sp/>packet_var)</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint32_t*)&amp;iter-&gt;map[off]<sp/>=<sp/>(b<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(g<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>r;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*else</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>*(uint32_t*)&amp;iter-&gt;map[off]<sp/>=<sp/>(b<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(g<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>r;</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*printf(&quot;r:<sp/>%x\t&quot;,<sp/>r);</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*printf(&quot;g:<sp/>%x\t&quot;,<sp/>g);</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*printf(&quot;b:<sp/>%x\t&quot;,<sp/>b);</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint32_t*)&amp;iter-&gt;map[off]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*printf(&quot;r:<sp/>0\t&quot;);</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*printf(&quot;g:<sp/>0\t&quot;);</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*printf(&quot;b:<sp/>0\t&quot;);</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*(uint32_t*)&amp;iter-&gt;map[off]<sp/>=<sp/>(126<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(126<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>126;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*printf(&quot;j:<sp/>%d\t&quot;,<sp/>j);</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*printf(&quot;k:<sp/>%d\n&quot;,<sp/>k);</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>clock()<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//usleep(100000);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;Time<sp/>Taken:<sp/>%lf\n&quot;,<sp/>((double)<sp/>end)<sp/>/<sp/>CLOCKS_PER_SEC);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal">}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/>*<sp/>modeset_cleanup(fd):<sp/>This<sp/>cleans<sp/>up<sp/>all<sp/>the<sp/>devices<sp/>we<sp/>created<sp/>during</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/>*<sp/>modeset_prepare().<sp/>It<sp/>resets<sp/>the<sp/>CRTCs<sp/>to<sp/>their<sp/>saved<sp/>states<sp/>and<sp/>deallocates</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*<sp/>all<sp/>memory.</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*<sp/>It<sp/>should<sp/>be<sp/>pretty<sp/>obvious<sp/>how<sp/>all<sp/>of<sp/>this<sp/>works.</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>modeset_cleanup(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmodeset__dev" kindref="compound">modeset_dev</ref>*<sp/>iter;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">drm_mode_destroy_dumb<sp/>dreq;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(modeset_list)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remove<sp/>from<sp/>global<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>modeset_list;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modeset_list<sp/>=<sp/>iter-&gt;next;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>restore<sp/>saved<sp/>CRTC<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeSetCrtc(fd,<sp/>iter-&gt;saved_crtc-&gt;crtc_id,<sp/>iter-&gt;saved_crtc-&gt;buffer_id,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;saved_crtc-&gt;x,<sp/>iter-&gt;saved_crtc-&gt;y,<sp/>&amp;iter-&gt;conn,<sp/>1,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;iter-&gt;saved_crtc-&gt;mode);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeFreeCrtc(iter-&gt;saved_crtc);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unmap<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>munmap(iter-&gt;map,<sp/>iter-&gt;size);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delete<sp/>framebuffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmModeRmFB(fd,<sp/>iter-&gt;fb);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delete<sp/>dumb<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(&amp;dreq,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dreq));</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dreq.handle<sp/>=<sp/>iter-&gt;handle;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drmIoctl(fd,<sp/>DRM_IOCTL_MODE_DESTROY_DUMB,<sp/>&amp;dreq);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>allocated<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(iter);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>I<sp/>hope<sp/>this<sp/>was<sp/>a<sp/>short<sp/>but<sp/>easy<sp/>overview<sp/>of<sp/>the<sp/>DRM<sp/>modesetting<sp/>API.<sp/>The<sp/>DRM</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>API<sp/>offers<sp/>much<sp/>more<sp/>capabilities<sp/>including:</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>double-buffering<sp/>or<sp/>tripple-buffering<sp/>(or<sp/>whatever<sp/>you<sp/>want)</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>vsync&apos;ed<sp/>page-flips</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>hardware-accelerated<sp/>rendering<sp/>(for<sp/>example<sp/>via<sp/>OpenGL)</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>output<sp/>cloning</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>graphics-clients<sp/>plus<sp/>authentication</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>DRM<sp/>planes/overlays/sprites</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>...</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>are<sp/>interested<sp/>in<sp/>these<sp/>topics,<sp/>I<sp/>can<sp/>currently<sp/>only<sp/>redirect<sp/>you<sp/>to</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*<sp/>existing<sp/>implementations,<sp/>including:</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>plymouth<sp/>(which<sp/>uses<sp/>dumb-buffers<sp/>like<sp/>this<sp/>example;<sp/>very<sp/>easy<sp/>to</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*<sp/>understand)</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>kmscon<sp/>(which<sp/>uses<sp/>libuterm<sp/>to<sp/>do<sp/>this)</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>wayland<sp/>(very<sp/>sophisticated<sp/>DRM<sp/>renderer;<sp/>hard<sp/>to<sp/>understand<sp/>fully<sp/>as<sp/>it</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses<sp/>more<sp/>complicated<sp/>techniques<sp/>like<sp/>DRM<sp/>planes)</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>xserver<sp/>(very<sp/>hard<sp/>to<sp/>understand<sp/>as<sp/>it<sp/>is<sp/>split<sp/>across<sp/>many</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*<sp/>files/projects)</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*<sp/>But<sp/>understanding<sp/>how<sp/>modesetting<sp/>(as<sp/>described<sp/>in<sp/>this<sp/>document)<sp/>works,<sp/>is</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/>essential<sp/>to<sp/>understand<sp/>all<sp/>further<sp/>DRM<sp/>topics.</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*<sp/>Any<sp/>feedback<sp/>is<sp/>welcome.<sp/>Feel<sp/>free<sp/>to<sp/>use<sp/>this<sp/>code<sp/>freely<sp/>for<sp/>your<sp/>own</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/>*<sp/>documentation<sp/>or<sp/>projects.</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Hosted<sp/>on<sp/>http://github.com/dvdhrm/docs</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Written<sp/>by<sp/>David<sp/>Rheinsberg<sp/>&lt;david.rheinsberg@gmail.com&gt;</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="custom.c"/>
  </compounddef>
</doxygen>
